/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.63
 * Generated at: 2022-06-17 08:37:39 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import kr.ac.kopo.board.vo.BoardFileVO;
import java.io.File;
import java.util.Enumeration;
import kr.ac.kopo.util.KopoFileNamePolicy;
import com.oreilly.servlet.MultipartRequest;
import kr.ac.kopo.board.dao.BoardDAO;
import kr.ac.kopo.login.LoginVO;
import kr.ac.kopo.board.vo.BoardVO;
import java.sql.*;
import kr.ac.kopo.util.ConnectionFactory;

public final class write_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("kr.ac.kopo.util.ConnectionFactory");
    _jspx_imports_classes.add("java.util.Enumeration");
    _jspx_imports_classes.add("kr.ac.kopo.login.LoginVO");
    _jspx_imports_classes.add("kr.ac.kopo.board.vo.BoardFileVO");
    _jspx_imports_classes.add("java.io.File");
    _jspx_imports_classes.add("com.oreilly.servlet.MultipartRequest");
    _jspx_imports_classes.add("kr.ac.kopo.board.vo.BoardVO");
    _jspx_imports_classes.add("kr.ac.kopo.util.KopoFileNamePolicy");
    _jspx_imports_classes.add("kr.ac.kopo.board.dao.BoardDAO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    \r\n");

  /* 
   작업순서
   1.파라미터 추출(제목,작성자,내용)
   2.t_board table에 새로운 레코드르를 생성해야 함. 새로운 게시글을 삽입함 
   3. 클라이언트에게 결과를 전송해주어야 함. 
  
  
  
  */
  
  request.setCharacterEncoding("utf-8");

  String saveFolder = "D:/Lecture/web-workspace/Misson-Web/src/main/webapp/upload";
/*원래 원칙은 이런식으로 /Mission -Web/upload 에 설정을 해주어야 함 톰캣서버를 지우면 우리가 업로드한 파일들이 사라지게 됨. 그래서 잠깐 옮기는 방식을 쓴다. 지켜보자 */


/*eclipse workspace에 있는 파일을 일로 끌고 복사해서 갖고 온 셈.   */	



  MultipartRequest multi = new MultipartRequest(
		  request,
		  saveFolder,
		  1024*1024*3,
		  "utf-8",
		  new KopoFileNamePolicy()
		  );
		  
	/*이렇게 하면 parsing 함   */
  String title = multi.getParameter("title");		 	 
  String writer = multi.getParameter("writer");
  String content = multi.getParameter("content");	

  //1. 게시판 저장 
 BoardVO board=new BoardVO();
 board.setTitle(title);
 board.setWriter(writer);
 board.setContent(content);
 
 BoardDAO dao= new BoardDAO();
 
 
 //등록할 글 번호 조회 
 int boardNo = dao.selectBoardNo();
 board.setNo(boardNo);
 
 
 System.out.println(board);
 
 dao.insertBoard(board);
 
  //2. 첨부파일 저장
  Enumeration<String> files = multi.getFileNames();
  /*이터레이터 나오기전에 enumration임*/
  /*hasNext처럼 그 다음 객체가 있는지 확인함  */
  while(files.hasMoreElements()){
	  String fileName=files.nextElement();
  	  System.out.println(fileName);
  	  File f =multi.getFile(fileName);
  	  if(f != null){
  		 String fileOriName = multi.getOriginalFileName(fileName);
  		 String fileSaveName = multi.getFilesystemName(fileName);
  		 int fileSize =(int) f.length();
  		 //long형이라 형변환 시킴
  		 
  		 BoardFileVO fileVO=new BoardFileVO();
  		 fileVO.setFileOriName(fileOriName);
  		 fileVO.setFileSaveName(fileSaveName);
  		 fileVO.setFileSize(fileSize);
  		 fileVO.setBoardNo(boardNo);
  		 
  		 System.out.println(fileVO);
  		 /*여기까지만 하면은 no을 가져올 수 없음 -> no을 가져와야한다. 어찌 가져올까?   */
  		 
  		 dao.insertBoardFile(fileVO);
  	  }
  }
  
  
 //파일이 한개면 이렇게 써도 됨.
  
 /*  File f = multi.getFile("attachfile1");
  if(f!=null){
	  String ori = multi.getOriginalFileName("attachfile1");
	  String save = multi.getFilesystemName("attachfile1");
  }
 */  
  
  
  /*  이렇게 쓰기 싫어서 위에 처럼 만들었음. 
  File f = multi.getFile("attachfile1");
  f= multi.getFile("attachfile2");
   */
  
  
  
  
  
  

/* 
  String title=request.getParameter("title");
  String writer=request.getParameter("writer"); */
 /*  LoginVO userVO=(LoginVO)session.getAttribute("userVO");
  String writer1=userVO.getId(); */
  /* 여기서 공유영역에 있는놈을 저장하면? -> 해도 되지만 서버는 서버만의 일을 view단은 view단의 일을 해야지! */
		  
  /* String content=request.getParameter("content"); */
  
  /*multipart로 받아오므로 이거 getparameter 이런걸로 못받아냄. -> 이걸 다 하도록 만들고 싶다!   */
  
  
 
/*   dao.insertBoard(title,writer,content); */
  /*VO에 감싸서 보내야 함! vo 객체를 파라미터로 보내면 됨 이러면 수정할 게 적어지게 됨! */
  //dao.insertBoard(board);
 
  
  
  
  /*맞게 되었는지 확인하자  
  //System.out.println("title: " + title); //  잘 찍혔느지 확인을 하자 
  System.out.println("writer: " + title);
  System.out.println("content: " + title);
  이게 되면은 그 다음부분으로 넘어가면 됨
  */
 /* 
  Connection conn = new ConnectionFactory().getConnection();
  StringBuilder sql = new StringBuilder();
  sql.append("insert into t_board(no,title,writer,content) ");
  sql.append(" values(seq_t_board_no.nextval,?,?,?) ");
  PreparedStatement pstmt = conn.prepareStatement(sql.toString());  
  pstmt.setString(1,title); // 물음표자리에 넣어주는 중 
  pstmt.setString(2,writer);
  pstmt.setString(3,content);

  
  pstmt.executeUpdate(); // 새글 등록이 완료되었다고 클라이언트한테 보내주면 됨. body로 가자  */
 

      out.write(" \r\n");
      out.write(" \r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("	alert('새글 등록을 완료하였습니다')\r\n");
      out.write("	//location을 그리고 옮겨주자 \r\n");
      out.write("	location.href=\"list.jsp\" \r\n");
      out.write("</script>   \r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<!--작성한 글을 서버쪽에 전달을 하면 클라이언트가 넘겨준 데이터를 가지고 작성자 제목 내용 등을 추출해야 함 추출한 데이터를 t _board table에 저장해야 함 -> 클라이언트에게 완료되었다는 결과를 알려주어야 함  -->\r\n");
      out.write("<!-- 	<h3>새 글 등록을 완료하였습니다.</h3>\r\n");
      out.write("	<a>목록으로 이동</a>  이것도 근데 귀찮다!-->\r\n");
      out.write("	\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
