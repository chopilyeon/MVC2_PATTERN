/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.63
 * Generated at: 2022-07-05 11:37:03 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class writeForm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/jsp/include/footer.jsp", Long.valueOf(1656930407188L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/Misson-Web/resources/css/layout.css\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/Misson-Web/resources/css/table.css\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/Misson-Web/resources/css/bootstrap.min.css\">\r\n");
      out.write("<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-0evHe/X+R7YkIZDRvuzKMRqM+OrBnVFBL6DOitfPri4tjfHxaWutUpFmBp4vmVor\" crossorigin=\"anonymous\">\r\n");
      out.write("<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\r\n");
      out.write("<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\r\n");
      out.write("<link href=\"https://fonts.googleapis.com/css2?family=Gowun+Batang:wght@700&display=swap\" rel=\"stylesheet\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/Misson-Web/resources/css/font.css\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/Misson-Web/resources/css/layout.css\">\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script src=\"/Misson-Web/resources/js/jquery-3.6.0.min.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("	$(document).ready(function(){\r\n");
      out.write("		$('#listBtn').click(function(){\r\n");
      out.write("			location.href=\"list.jsp\"\r\n");
      out.write("		})\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("	})\r\n");
      out.write("\r\n");
      out.write("	 function checkForm(){\r\n");
      out.write("		\r\n");
      out.write("		let f = document.writeForm\r\n");
      out.write("		if(f.title.value==''){\r\n");
      out.write("			alert('제목을 입력하세요')\r\n");
      out.write("			f.title.focus() \r\n");
      out.write("			/*focus 함수 때문에 마우스에 커서가 가 있음 */\r\n");
      out.write("			return false\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		/* if(f.writer.value==''){\r\n");
      out.write("			alert('작성자를 입력하세요')\r\n");
      out.write("			f.writer.focus()\r\n");
      out.write("			return false\r\n");
      out.write("		}\r\n");
      out.write("		 */\r\n");
      out.write("		if(f.content.value==''){\r\n");
      out.write("			alert('내용을 입력하세요')\r\n");
      out.write("			f.content.focus()\r\n");
      out.write("			return false\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		//첨부파일 확장자 체크를 해보자! 이래서 밑에다가 함수를 따로 만든 것임.  attachfile2에도 쓰려고~! \r\n");
      out.write("		if(checkExt(f.attachfile1))\r\n");
      out.write("			return false;\r\n");
      out.write("\r\n");
      out.write("		if(checkExt(f.attachfile2))\r\n");
      out.write("			return false;\r\n");
      out.write("		\r\n");
      out.write("		return true;\r\n");
      out.write("	}	\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		function checkExt(obj){\r\n");
      out.write("			/*console.log(obj.value)*/\r\n");
      out.write("			/* obj.value 출력하게 되면은 앞에 fakepath로 출력이 됨. 확장자니까 뒤에 .jpg만 뽑아내면 됨! */\r\n");
      out.write("			let filebidName=['exe','java','class','java','jsp']\r\n");
      out.write("			let fileNmae=obj.value\r\n");
      out.write("			let ext=fileName.substring(fileNmae.lastIndexOf('.')+1)\r\n");
      out.write("			console.log(ext)\r\n");
      out.write("			\r\n");
      out.write("			for(let i=0; i<forbidName.length;i++){\r\n");
      out.write("				if(forbidName[i]==ext){\r\n");
      out.write("					alert('['+ext+'] 확장자는 파일 업로드 정책에 위배됩니다')\r\n");
      out.write("					return true;\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("			return false\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("\r\n");
      out.write("	\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<header>\r\n");
      out.write("		");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/jsp/include/topMenu.jsp", out, false);
      out.write("\r\n");
      out.write("	</header>\r\n");
      out.write("	<section>\r\n");
      out.write("	<div align=\"center\">\r\n");
      out.write("		<hr>\r\n");
      out.write("		<h2>새글 등록폼</h2>\r\n");
      out.write("		</hr>\r\n");
      out.write("		<br>\r\n");
      out.write("		<!--onsubmit은 form 태그에 씀.submit버튼 눌렀을 때 action이 가르키고 있는 url로 이동할지 막을지 결정하는 것이 onsubmit임 true 대신에 false 쓰면은 이동을 제한함. 하나라도 빈 공간이 있으면 가지마!   -->\r\n");
      out.write("	<!-- <form action=\"write.jsp\" method=\"post\" onsubmit=\"return true\"> 지금 하나하나에 다 required 쓰기가 너무 귀찮음. 그래서 Form 태그에다가 써주자 -->\r\n");
      out.write("	\r\n");
      out.write("	<form action=\"write.jsp\" method=\"post\" name=\"writeForm\" onsubmit=\"return checkForm()\"\r\n");
      out.write("	enctype=\"multipart/form-data\">\r\n");
      out.write("	<!--이름부분과 내용부분이 동시에 우리에게 보여지므로 multipart라고 부르는 것임. -->\r\n");
      out.write("		<input type=\"hidden\" name =\"writer\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${userVO.id}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\r\n");
      out.write("		<table border=\"1\" style=\"width:80%\">\r\n");
      out.write("			<tr>\r\n");
      out.write("				<!--th가 header임 자동으로 정렬해줌 tr은 row임 td가 tabledata임-->\r\n");
      out.write("				<th width=\"25%\">제목</th>	\r\n");
      out.write("				<td><input type=\"text\" name=\"title\" size=80></td>  \r\n");
      out.write("				<!--속성과 value가 같으면 생략도 가능함 그냥 required만 써도 됨 required=\"required\" -->\r\n");
      out.write("				\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("			<!--이렇게만 하면 writeform에는 writer가 포함이 되지 않음 ->  날라가지 않으므로  에러가 발생하게 됨. writer는 또 not null임! ㅍ미ㅕㄷ  -->\r\n");
      out.write("				<th width =\"25%\">작성자</th>\r\n");
      out.write("				<td>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${userVO.id }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</td> \r\n");
      out.write("				<!--이렇게하면 나오긴 하지만 수정이 안됨! 위에 처럼 작성하면  not null이 됨   -->\r\n");
      out.write("			");
      out.write("\r\n");
      out.write("				<!--이렇게 하면 입력창처럼 보이게 됨 그래서 우린 userVO.id 로 고 싶다! 근데 값도 넘기고 싶다! input 태그의 타입 속성에 hidden을 쓰더라~!   -->\r\n");
      out.write("		<!-- 		<td><input type=\"text\" name=\"writer\" required></td> -->\r\n");
      out.write("				<!--write에 들어가서 아예 sessionAttribute에다가 저장한 걸 넣어줄수도 있음 하지만 view단에서는 back단을 신경쓰고 싶지 않더라~!  -->\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th width =\"25%\">내용</th>\r\n");
      out.write("				<td>\r\n");
      out.write("					<textarea rows=\"5\" cols=\"80\" name=\"content\"></textarea>\r\n");
      out.write("				</td>\r\n");
      out.write("				<!--content 아무것도 안쓰면 에러가 발생하게 됨 not null로 정의했으므로   -->\r\n");
      out.write("				\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th>첨부파일</th>\r\n");
      out.write("				<td>\r\n");
      out.write("					<input type=\"file\" name=\"attachfile1\"><br>\r\n");
      out.write("					<input type=\"file\" name=\"attachfile2\">\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("		</table>\r\n");
      out.write("		<br>\r\n");
      out.write("		<input type=\"submit\" value=\"새글등록\">&nbsp;\r\n");
      out.write("		<button id=\"listBtn\">목록</button>\r\n");
      out.write("	<form>\r\n");
      out.write("	</div>\r\n");
      out.write("</section>\r\n");
      out.write("<footer>\r\n");
      out.write("		");
      out.write("\r\n");
      out.write("<footer class=\"d-flex flex-wrap justify-content-between align-items-center py-3 my-4 border-top\">\r\n");
      out.write("    <p class=\"col-md-4 mb-0 text-muted\">© 2022 Company, Inc</p>\r\n");
      out.write("\r\n");
      out.write("    <a href=\"/\" class=\"col-md-4 d-flex align-items-center justify-content-center mb-3 mb-md-0 me-md-auto link-dark text-decoration-none\">\r\n");
      out.write("      <svg class=\"bi me-2\" width=\"40\" height=\"32\"><use xlink:href=\"#bootstrap\"></use></svg>\r\n");
      out.write("    </a>\r\n");
      out.write("\r\n");
      out.write("    <ul class=\"nav col-md-4 justify-content-end\">\r\n");
      out.write("      <li class=\"nav-item\"><a href=\"#\" class=\"nav-link px-2 text-muted\">Home</a></li>\r\n");
      out.write("      <li class=\"nav-item\"><a href=\"#\" class=\"nav-link px-2 text-muted\">Features</a></li>\r\n");
      out.write("      <li class=\"nav-item\"><a href=\"#\" class=\"nav-link px-2 text-muted\">Pricing</a></li>\r\n");
      out.write("      <li class=\"nav-item\"><a href=\"#\" class=\"nav-link px-2 text-muted\">FAQs</a></li>\r\n");
      out.write("      <li class=\"nav-item\"><a href=\"#\" class=\"nav-link px-2 text-muted\">About</a></li>\r\n");
      out.write("    </ul>\r\n");
      out.write("  </footer>");
      out.write("\r\n");
      out.write("<!-- 		footer부분 -->\r\n");
      out.write("		<!--include xml forward 에서는 root의 의미는 밑에는 localhost:9999/mission-Web임 상대경로를 못쓰는 이유?  -->\r\n");
      out.write("		<!--원래는 localhost:9999임   -->\r\n");
      out.write("\r\n");
      out.write("</footer>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
